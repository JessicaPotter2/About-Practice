通过setAttribute（）方法对文档做出的修改，将使得文档在浏览器窗口里的显示效果和/行为动作发生相应的变化，但我们查看源代码是仍然是原来是属性值，即setAttribute（）方法做出的修改不会反应在文档本身的源代码里。但是在控制台看到的是已经修改后的属性。DOM的工作模式：先加载文档的静态内容，再以动态方式对他们进行刷新，动态刷新不影响文档的静态内容。对页面内容的刷新不需要最终用户在他们的浏览器里执行页面刷新操作就可以实现。
元素节点的nodeType属性值是1，属性节点的nodeType属性值是2，文本节点的nodeType属性值是3.
注意应该只在有绝对必要的情况下才使用弹出窗口，因为这将牵涉到网页的可访问性问题，如果网页上的某个链接将弹出新窗口，最好在这个链接本身的文字中予以说明。
DOM脚本编程工作有关问题：预留退路，向后兼容性，分离JavaScript。
把HTML文档内容与JavaScript代码所实现的操作行为分离开很重要，如果想用JavaScript给某个网页添加一些行为，就不应该让JavaScript代码对这个网页的结构有任何依赖。
结构化程序设计（structed programming）理论提出这样一条原则：每个函数应该只有一个入口点和一个出口点。同一个函数有多个出口点的情况时可以接受的，但前提是它们应该集中出现在这个函数的开头部分。
保留字和现有的JavaScript函数或方法的名字不能用来命名变量。
links[i].onclick=function(){}这条语句定义了一个匿名函数，适合定义在整个脚本里只出现一次的函数，匿名函数没有名字，只能在哪里定义，在哪里使用。
每个事件处理函数只能绑定一条指令；如：window.onload=firstFunction();window.onload=secondFunction;secondFunction将取代firstFunction。可以这样写：window.onload=function(){firstFunction();secondFunction();}也可已使用addLoadEvent();函数addLoadEvent();:
/*addLoadEvent()函数，把函数绑定到window.onload事件上*/
		function addLoadEvent(func){
			var oldonload=window.onload;
			if(typeof window.onload!='function'){
				window.onload=func;
			}else{
				window.onload=function(){
					oldonload();
					func();
				}
			}
		}
		addLoadEvent(firstFunction);
		addLoadEvent(secondFunction);
三元操作符：？   variable=condition?if true:if false;
nodeName属性总是返回一个大写字母的值，即使元素在HTML文档里是小写字母。
脚本绝不应该对HTML文档的内容和结构做太多假设。
HTML-DOM记号通常比较剪短，但他们只能用来处理Web文档。
MIME类型application/xhtml+xml与document.write()方法不兼容，浏览器在呈现这种XHTML文档时根本不会执行document.write()方法。
innerHTML属性也只适用于HTML文档。浏览器在呈现正宗的XHTML文档（即MIME类型是application/xhtml+xml的XHTML文档）时不会去执行innerHTML属性。
innerHTML会覆盖原先的HTML内容。
以动态方式实时创建HTML内容：我们不是在创建HTML内容，而是在改变DOM节点树。根据DOM，一个文档就是一颗节点树，如果想在节点树上添加内容，就必须插入新的节点。如果像把一些HTML内容添加到文档里，就必须在相应的DOM节点树上插入元素节点。
createElement（）方法创建元素节点，createTextNode创建文本节点。
parentElement.insertBefore(newElement,targetElement)
即使某种特定的浏览器会引起问题，也没有必要使用浏览器嗅探代码，对浏览器的名称和版本号进行嗅探的办法很难做到面面俱到，而且往往会导致非常复杂难解的代码。
JavaScript脚本只应该用来充实文档的内容，要避免使用DOM技术来直接插入核心内容。
减号和加号之类的操作符是JavaScript语言保留给自己使用的特殊字符，不允许用在函数或变量的名字里。这同时意味着他们也不能用在方法或属性（方法和属性是关联在某个对象上的函数和变量）的名字里。
element.style.fontFamily  element.style.backgroundColor  element.style.fontWeight  element.style.marginTopWidth
通过style属性检索样式信息有很大的局限性：只能返回那些内嵌在HTML内容里的样式信息。在外部样式表里声明的样式信息不会进入style对象。
我们将需要决定是使用纯粹的CSS解决方案，还是利用DOM来设置样式。我们需要考虑：这个问题最简单的解决方案是什么，那种解决方案会得到更多的浏览器的支持。一般原则：如果想改变某个元素的呈现效果，就应该选用CSS，如果想改变某个元素的行为，就应该用DOM。如果想根据某个元素的行为去改变它的呈现效果，需要进一步的思考。
与其使用DOM脚本去直接改变某个元素的样式信息，不如通过JavaScript代码去刷新这个元素的class属性。
className属性是一个可读/可写的属性，凡是元素节点都有这个属性。通过className属性设置某个元素的class属性值将替换，而不是追加该元素现有的一切class设置。addClass函数，可以解决这个问题：
function addClass(element,value){
			if(!element.className){
				element.className=value;
			}else{
				newClassName=element.className+" "+value;
				element.className=newClassName;
			}
		}
在挑选解决方案时，只要有可能，我们应该刷新className属性值，而不是直接刷新style对象的有关属性。
static：元素按照他们在HTML文档里的先后顺序出现在浏览器窗口里。relative与static相似，但是position属性为relative的元素还可以在float属性的作用下从文档的正常显示顺序中脱离出来。
variable=setTimeout("function",interval),interval以毫秒为单位。
clearTimeout（variable）函数可以取消等待执行龟裂里的某个尚未开始执行的函数。
从一个函数内部调用这个函数本身叫做递归调用。
Math.ceil()向上取整，Math.floor()向下取整，Math.round()取最近的整数。
当前页面的URL可以用window.location.href获得。
string.indexOf(substring)返回substring在字符串string里第一次出现的位置。如果没有找到一个匹配，将返回-1.返回其他值说明他找到了一个匹配。
split（）方法根据某个给定的分隔符把一个字符串拆分成两个或更多个部分的常用方法：array=string.split(character)
Form对象，Form对象的elements.length属性只对表单元素，如input，textarea等进行统计。elements数组里的每个表单都有自己的一套属性，elements.value表示该元素的当前值，elements.defaultValue表示该表单元素的初始值。onfocus事件将在用户用Tab键或鼠标选中某个元素时被触发；onblur事件将在用户让输入焦点离开该元素时被触发。
测试工作变得越复杂，出现“负误判”的概率也就越大。即对表单数据检查太过复杂的话，合法数据遭到拒绝的概率就会增加。
readyState属性包含着一个数值，这个数值将随着服务器对相关请求的处理进度而变化，有五种可去值：0 尚未初始化，1 正在加载，2 加载完毕，3 正在处理，4 处理完毕。一旦readyState属性的值变成了4，就可以对从服务器返回的响应数据进行访问了，从服务器返回的响应数据保存在responseText属性里，那是一个字符串值。
文本节点的nodeName返回值是#text.
cloneNode()方法将为给定节点创建一个副本，这个方法返回值是一个指向新建克隆节点的引用指针，这个方法只有一个布尔类型的参数，它的取值只可能是true或false。cloneNode（true）包含被复制节点完全一样的子节点，cloneNode（false）不包含被复制元素的任何子节点，但是会复制属性节点，注意被复制元素有一个独一无二的id属性值，复制的节点id属性值相同，需要进行修改。
removeChild（）可以删除节点，某节点被removeChild（）方法删除时，这个节点所包含的所有子节点将同时被删除。
replaceChild（newChild，oldChild）方法将把一个给定父元素里的一个子节点替换为另外一个节点。
haschildNodes方法检查一个给定元素是否有子节点，返回true有子节点，返回false无子节点。文本节点和属性节点不可能包含任何子节点，这两类节点使用hasChildNodes方法返回值是false。
nodeValue属性返回给定节点的当前值，如果给定节点是一个属性节点，返回这个属性的值，如果是文本节点，返回这个文本节点的内容。元素节点返回null.